//	Sequences and look-up tables
//	MSS 19 Nov 2013

//TOOD precalc the log(f2/f1) for all these
//TODO precalc event duration (1s / npoints) in uS or nS
//npoints = 2 -> 50% duty cycle
//Dur in mSec, convert this to uSec or nano sec

// Convert these to a series of indexed events that can be
// fed to the synth portion, rather than having the synth
// calc everything on the fly

#define SEQ_COUNT 6
#define MAX_PTS 16 //any higher than 16 and the buzzer can't respond quick enough
//TODO split up the slides in to 2-3 parts
//Divide Duration and Freq range
const uint16_t startup[] = {
//Dur, 	Freq1, 	Freq2, 	wave, 	npoints, ???
141, 	1976, 	1976, 	1, 	2, 	0,
47,  	1976, 	1760, 	1, 	2, 	0,
238, 	1760, 	1760, 	1, 	2, 	0,
188, 	2217, 	2217, 	1, 	2, 	0,
50,  	1175, 	1175, 	1, 	4, 	0,
383, 	2349, 	2349, 	1, 	2, 	0,
67,  	2637, 	2637, 	1, 	2, 	0,
67,  	2349, 	2349, 	1, 	2, 	0,
0,   	0,    	0,    	0,	0, 	0
};


const uint16_t start_print[] = {
100, 	1245, 	1245, 	1, 	4,	0,
100, 	1047, 	1047, 	1, 	4, 	0,
100, 	1245, 	1245, 	1, 	4, 	0,
100, 	1397, 	1397, 	1, 	4, 	0,
100, 	1245, 	1245, 	1, 	4, 	0,
100, 	1397, 	1397, 	1, 	4, 	0,
300, 	1865, 	1865, 	1, 	4, 	0,
37,  	1047, 	1047, 	1, 	4, 	0,
150, 	2093, 	2093, 	1, 	4, 	0,
0,   	0,    	0,    	0, 	0, 	0
};

const uint16_t print_done[] = {
171, 	1175, 	1175, 	1, 	2, 	0,
85,  	1175, 	1047, 	1, 	2, 	0,
40,  	523,  	523,  	1, 	2, 	0,
130, 	1046, 	1046, 	1, 	2, 	0,
40,  	659,  	659,  	1, 	2, 	0,
472, 	1318, 	1318, 	1, 	2, 	0,
40,  	784,  	784,  	1, 	2, 	0,
130, 	1568, 	1568, 	1, 	2, 	0,
40,  	523,  	523,  	1, 	2, 	0,
342, 	1047, 	1047, 	1, 	4, 	0,
0,   	0,    	0,    	0, 	0, 	0
};

const uint16_t print_ready[] = {
100, 	1047, 	1319, 	1, 	2, 	0,
100, 	1319, 	1319, 	1, 	4, 	0,
100, 	784,  	784,  	1, 	2, 	0,
100, 	1047, 	1047, 	1, 	4, 	0,
100, 	784,  	784,  	1, 	4, 	0,
50,  	659,  	659,  	1, 	2, 	0,
100, 	1319, 	1319, 	1, 	2, 	0,
0,   	0,    	0,    	0, 	0, 	0
};

const uint16_t error[] = {
50,  	5920, 	5920, 	1, 	2, 	0,
50,  	2960, 	2960, 	1, 	3, 	0,
50,  	1973, 	1973, 	1, 	4, 	0,
50,  	1480, 	1480, 	1, 	5, 	0,
54,  	2488, 	2488, 	1, 	2, 	0,
54,  	1244, 	1244, 	1, 	3, 	0,
54,  	829,  	829,  	1, 	4, 	0,
54,  	622,  	622,  	1, 	5, 	0,
58,  	2096, 	2096, 	1, 	2, 	0,
58,  	1048, 	1048, 	1, 	3, 	0,
58,  	698,  	698,  	1, 	4, 	0,
58,  	524,  	524,  	1, 	5, 	0,
62,  	1760, 	1760, 	1, 	2, 	0,
62,  	880,  	880,  	1, 	3, 	0,
62,  	586,  	586,  	1, 	4, 	0,
62,  	440,  	440,  	1, 	5, 	0,
68,  	1248, 	1248, 	1, 	2, 	0,
68,  	624,  	624,  	1, 	3, 	0,
68,  	416,  	416,  	1, 	4, 	0,
68,  	312,  	312,  	1, 	5, 	0,
222, 	262,  	262,  	1, 	6, 	0,
0,   	0,    	0,    	0, 	0, 	0
};

const uint16_t long_tones[] ={
1000,	1000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	2000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	3000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	4000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	5000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	6000,	1000,	1,	2,	0,
//250,	0,	0,	0,	0,	0,
1000,	7000,	1000,	1,	2,	0,
0,	0,	0,	0,	0,	0
};


const uint16_t *sequences[] ={
	startup,
	start_print,
	print_done,
	print_ready,
	error,
	long_tones
};


//Dur is in nSec
//needs to be int b/c ln can be negative
//a lot of these ln calcs are very small floating point numbers...hmmm
//Can we pre-calc the "nextSwitch" amount?
const int32_t startup_precalc[] = {
//Dur, 	Freq1, 	Freq2, 	wave, 	npoints, Ln(F2/F1)
141000000, 	1976, 	1976, 	1, 	2, 	0,
47000000,  	1976, 	1760, 	1, 	2, 	-0.116,
238000000, 	1760, 	1760, 	1, 	2, 	0,
188000000, 	2217, 	2217, 	1, 	2, 	0,
50000000,  	1175, 	1175, 	1, 	4, 	0,
383000000, 	2349, 	2349, 	1, 	2, 	0,
67000000,  	2637, 	2637, 	1, 	2, 	0,
67000000,  	2349, 	2349, 	1, 	2, 	0,
0,   		0,    	0,    	0,	0, 	0
};

const int32_t start_print_precalc[] = {
100000000,	1245, 	1245, 	1, 	4,	0,
100000000, 	1047, 	1047, 	1, 	4, 	0,
100000000, 	1245, 	1245, 	1, 	4, 	0,
100000000, 	1397, 	1397, 	1, 	4, 	0,
100000000, 	1245, 	1245, 	1, 	4, 	0,
100000000, 	1397, 	1397, 	1, 	4, 	0,
300000000, 	1865, 	1865, 	1, 	4, 	0,
37000000,  	1047, 	1047, 	1, 	4, 	0,
150000000, 	2093, 	2093, 	1, 	4, 	0,
0,   		0,    	0,    	0, 	0, 	0
};

const int32_t print_done_precalc[] = {
171000000, 	1175, 	1175, 	1, 	2, 	0,
85000000,  	1175, 	1047, 	1, 	2, 	-0.115,
40000000,  	523,  	523,  	1, 	2, 	0,
130000000, 	1046, 	1046, 	1, 	2, 	0,
40000000,  	659,  	659,  	1, 	2, 	0,
472000000, 	1318, 	1318, 	1, 	2, 	0,
40000000,  	784,  	784,  	1, 	2, 	0,
130000000, 	1568, 	1568, 	1, 	2, 	0,
40000000,  	523,  	523,  	1, 	2, 	0,
342000000, 	1047, 	1047, 	1, 	4, 	0,
0,   		0,    	0,    	0, 	0, 	0
};

const int32_t print_ready_precalc[] = {
100000000, 	1047, 	1319, 	1, 	2, 	0.231,
100000000, 	1319, 	1319, 	1, 	4, 	0,
100000000, 	784,  	784,  	1, 	2, 	0,
100000000, 	1047, 	1047, 	1, 	4, 	0,
100000000, 	784,  	784,  	1, 	4, 	0,
50000000,  	659,  	659,  	1, 	2, 	0,
100000000, 	1319, 	1319, 	1, 	2, 	0,
0,   		0,    	0,    	0, 	0, 	0
};

const int32_t error_precalc[] = {
50000000,  	5920, 	5920, 	1, 	2, 	0,
50000000,  	2960, 	2960, 	1, 	3, 	0,
50000000,  	1973, 	1973, 	1, 	4, 	0,
50000000,  	1480, 	1480, 	1, 	5, 	0,
54000000,  	2488, 	2488, 	1, 	2, 	0,
54000000,  	1244, 	1244, 	1, 	3, 	0,
54000000,  	829,  	829,  	1, 	4, 	0,
54000000,  	622,  	622,  	1, 	5, 	0,
58000000,  	2096, 	2096, 	1, 	2, 	0,
58000000,  	1048, 	1048, 	1, 	3, 	0,
58000000,  	698,  	698,  	1, 	4, 	0,
58000000,  	524,  	524,  	1, 	5, 	0,
62000000,  	1760, 	1760, 	1, 	2, 	0,
62000000,  	880,  	880,  	1, 	3, 	0,
62000000,  	586,  	586,  	1, 	4, 	0,
62000000,  	440,  	440,  	1, 	5, 	0,
68000000,  	1248, 	1248, 	1, 	2, 	0,
68000000,  	624,  	624,  	1, 	3, 	0,
68000000,  	416,  	416,  	1, 	4, 	0,
68000000,  	312,  	312,  	1, 	5, 	0,
222000000, 	262,  	262,  	1, 	6, 	0,
0,   		0,    	0,    	0, 	0, 	0
};
